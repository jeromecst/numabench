diff --git a/include/linux/cpuset.h b/include/linux/cpuset.h
index d58e0476ee8e..c279fce53fe8 100644
--- a/include/linux/cpuset.h
+++ b/include/linux/cpuset.h
@@ -119,6 +119,7 @@ extern int proc_cpuset_show(struct seq_file *m, struct pid_namespace *ns,
 
 extern int cpuset_mem_spread_node(void);
 extern int cpuset_slab_spread_node(void);
+extern void (*dump_numa_log_event)(bool dump_pages, int nr_migrations, int target_nid);
 
 static inline int cpuset_do_page_mem_spread(void)
 {
diff --git a/kernel/cgroup/cpuset.c b/kernel/cgroup/cpuset.c
index b474289c15b8..64c113b0b96e 100644
--- a/kernel/cgroup/cpuset.c
+++ b/kernel/cgroup/cpuset.c
@@ -3905,6 +3905,10 @@ int cpuset_slab_spread_node(void)
 
 EXPORT_SYMBOL_GPL(cpuset_mem_spread_node);
 
+void (*dump_numa_log_event)(bool, int, int) = NULL;
+EXPORT_SYMBOL_GPL(dump_numa_log_event);
+
+
 /**
  * cpuset_mems_allowed_intersects - Does @tsk1's mems_allowed intersect @tsk2's?
  * @tsk1: pointer to task_struct of some task.
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index daff72f00385..d2cb960a1f82 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3120,6 +3120,8 @@ void set_task_cpu(struct task_struct *p, unsigned int new_cpu)
 	if (task_cpu(p) != new_cpu) {
 		if (p->sched_class->migrate_task_rq)
 			p->sched_class->migrate_task_rq(p, new_cpu);
+		if (dump_numa_log_event)
+			dump_numa_log_event(false, 0, 0);
 		p->se.nr_migrations++;
 		rseq_migrate(p);
 		perf_event_task_migrate(p);
@@ -9115,6 +9117,8 @@ void sched_setnuma(struct task_struct *p, int nid)
 		put_prev_task(rq, p);
 
 	p->numa_preferred_nid = nid;
+	if (dump_numa_log_event)
+		dump_numa_log_event(false, 0, 0);
 
 	if (queued)
 		enqueue_task(rq, p, ENQUEUE_RESTORE | ENQUEUE_NOCLOCK);
diff --git a/mm/migrate.c b/mm/migrate.c
index dff333593a8a..002cd4edf9ec 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -2166,10 +2166,12 @@ int migrate_misplaced_page(struct page *page, struct vm_area_struct *vma,
 	pg_data_t *pgdat = NODE_DATA(node);
 	int isolated;
 	int nr_remaining;
+	int src_nid;
 	unsigned int nr_succeeded;
 	LIST_HEAD(migratepages);
 	int nr_pages = thp_nr_pages(page);
 
+	src_nid = page_to_nid(page);
 	/*
 	 * Don't migrate file pages that are mapped in multiple processes
 	 * with execute permissions as they are probably shared libraries.
@@ -2204,6 +2206,8 @@ int migrate_misplaced_page(struct page *page, struct vm_area_struct *vma,
 	}
 	if (nr_succeeded) {
 		count_vm_numa_events(NUMA_PAGE_MIGRATE, nr_succeeded);
+		if (dump_numa_log_event)
+			dump_numa_log_event(false, nr_succeeded, src_nid);
 		if (!node_is_toptier(page_to_nid(page)) && node_is_toptier(node))
 			mod_node_page_state(pgdat, PGPROMOTE_SUCCESS,
 					    nr_succeeded);
